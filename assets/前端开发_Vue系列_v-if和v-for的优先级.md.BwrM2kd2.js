import{_ as t,c as e,o as a,a7 as i}from"./chunks/framework.DZKVYKRh.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"前端开发/Vue系列/v-if和v-for的优先级.md","filePath":"前端开发/Vue系列/v-if和v-for的优先级.md"}'),r={name:"前端开发/Vue系列/v-if和v-for的优先级.md"},l=i('<div style="text-align:center;"><h1>v-if和v-for的优先级</h1></div><ol><li><h3 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;作用&quot;">​</a></h3><table><tr><td style="width:100px;">v-if</td><td>条件渲染指令，在指令表达式返回true值时才被渲染</td></tr><tr><td style="width:100px;">v-show</td><td>列表渲染指令，基于数组渲染列表，以(item,index) in list形式，item为列表项，index为列表索引</td></tr></table></li><li><h3 id="优先级" tabindex="-1">优先级 <a class="header-anchor" href="#优先级" aria-label="Permalink to &quot;优先级&quot;">​</a></h3><ul><li>v-for高于v-if：在源码genElement()函数中，v-for比v-if优先进行判断</li></ul></li><li><h3 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><ul><li>不在同一个元素上同时使用的原因：每次渲染都会先循环再进行条件判断，造成性能浪费，可以使用template标签套多一层解决</li></ul></li></ol>',2),o=[l];function d(n,s,_,c,h,f){return a(),e("div",null,o)}const m=t(r,[["render",d]]);export{u as __pageData,m as default};
