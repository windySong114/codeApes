import{_ as l,c as i,o as e,a7 as a}from"./chunks/framework.DZKVYKRh.js";const t="/codeApes/assets/redraw.BfOQOQvA.png",S=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"前端开发/HTML与CSS系列/回流和重绘.md","filePath":"前端开发/HTML与CSS系列/回流和重绘.md"}'),o={name:"前端开发/HTML与CSS系列/回流和重绘.md"},r=a('<div style="text-align:center;"><h1>回流和重绘</h1></div><ol><li><h2 id="含义" tabindex="-1">含义 <a class="header-anchor" href="#含义" aria-label="Permalink to &quot;含义&quot;">​</a></h2><ul><li>回流：布局引擎会根据各种样式计算每个盒子在页面上的大小与位置</li><li>重绘：当计算好盒模型的位置、大小及其他属性后，浏览器根据每个盒子特性进行绘制</li></ul></li><li><h2 id="浏览器解析渲染机制" tabindex="-1">浏览器解析渲染机制 <a class="header-anchor" href="#浏览器解析渲染机制" aria-label="Permalink to &quot;浏览器解析渲染机制&quot;">​</a></h2><p><img src="'+t+'" alt=""></p><ul><li>解析HTML，生成DOM树，解析CSS，生成CSSOM树</li><li>将DOM树和CSSOM树结合，生成渲染树(Render Tree)</li><li>Layout(回流):根据生成的渲染树，进行回流(Layout)，得到节点的几何信息（位置，大小）</li><li>Painting(重绘):根据渲染树以及回流得到的几何信息，得到节点的绝对像素</li><li>Display:将像素发送给GPU，展示在页面上</li></ul></li><li><h2 id="触发回流" tabindex="-1">触发回流 <a class="header-anchor" href="#触发回流" aria-label="Permalink to &quot;触发回流&quot;">​</a></h2><p>计算节点的位置和几何信息，当页面布局和几何信息发生变化时，就会触发回流</p><ul><li>添加或删除可见的DOM元素</li><li>元素的位置发生变化</li><li>元素的尺寸发生变化（包括外边距、内边框、边框大小、高度和宽度等）</li><li>内容发生变化，比如文本变化或图片被另一个不同尺寸的图片所替代</li><li>页面的初始渲染</li><li>浏览器的窗口尺寸变化（由于回流根据视口的大小计算元素的位置和大小）</li><li>通过即时计算获得的大小和位置信息，如：offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight</li></ul></li><li><h2 id="触发重绘" tabindex="-1">触发重绘 <a class="header-anchor" href="#触发重绘" aria-label="Permalink to &quot;触发重绘&quot;">​</a></h2><p>触发回流一定会触发重绘，回流是绘制形状大小位置，而重绘则是给这个形状上色</p><ul><li>颜色的修改</li><li>文本方向的修改</li><li>阴影的修改</li></ul></li><li><h2 id="减少回流和重绘" tabindex="-1">减少回流和重绘 <a class="header-anchor" href="#减少回流和重绘" aria-label="Permalink to &quot;减少回流和重绘&quot;">​</a></h2><ul><li>设定元素样式时，尽可能通过改变元素的 class 类名实现</li><li>避免使用 CSS 的 JavaScript 表达式</li><li>避免设置多项内联样式</li><li>应用元素动画时，使用 position 属性的 fixed 值或 absolute 值，尽可能地使元素脱离文档流，从而减少对其他元素的影响</li><li>避免使用 table 布局，table 中每个元素的大小以及内容的改动，都会导致整个 table 的重新计算</li><li>使用css3硬件加速，可以让transform、opacity、filters这些动画不会引起回流重绘</li></ul></li></ol>',2),s=[r];function n(c,h,d,_,f,u){return e(),i("div",null,s)}const m=l(o,[["render",n]]);export{S as __pageData,m as default};
