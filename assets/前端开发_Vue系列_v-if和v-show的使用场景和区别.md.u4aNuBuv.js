import{_ as t,c as e,o as a,a7 as d}from"./chunks/framework.DZKVYKRh.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"前端开发/Vue系列/v-if和v-show的使用场景和区别.md","filePath":"前端开发/Vue系列/v-if和v-show的使用场景和区别.md"}'),r={name:"前端开发/Vue系列/v-if和v-show的使用场景和区别.md"},o=d('<div style="text-align:center;"><h1>v-if和v-show的使用场景和区别</h1></div><ol><li><h3 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h3><table><tr><td style="width:100px;">v-if</td><td>一次性显示/隐藏或需要重新触发视图局部更新</td></tr><tr><td style="width:100px;">v-show</td><td>频繁切换节点显示/隐藏</td></tr></table></li><li><h3 id="区别" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别&quot;">​</a></h3><ul><li>相同：都能控制DOM元素在页面上的显示/隐藏</li><li>不同</li></ul><table><tr><td style="width:100px;">控制手段</td><td>v-if显示/隐藏是直接操作DOM节点的添加或删除；v-show显示/隐藏是为该元素在CSS中设置display:block/none</td></tr><tr><td style="width:100px;">编译过程</td><td>v-if切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；v-show只是简单的基于CSS切换</td></tr><tr><td style="width:100px;">编译条件</td><td>v-if由false变为true时，触发组件的beforeCreate、create、beforeMount、mounted钩子，由true变为false时，触发组件的beforeDestory、destoryed方法；v-show由false变为true时不会触发组件的生命周期</td></tr><tr><td style="width:100px;">性能消耗</td><td>v-if有更高的切换消耗；v-show有更高的初始渲染消耗</td></tr></table></li></ol>',2),i=[o];function s(l,_,h,n,c,f){return a(),e("div",null,i)}const p=t(r,[["render",s]]);export{u as __pageData,p as default};
