import{_ as l,c as i,o as e,a7 as a}from"./chunks/framework.DZKVYKRh.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"前端开发/Webpack系列/对Webpack的理解.md","filePath":"前端开发/Webpack系列/对Webpack的理解.md"}'),r={name:"前端开发/Webpack系列/对Webpack的理解.md"},t=a('<div style="text-align:center;"><h1>对Webpack的理解</h1></div><ol><li><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><ul><li>含义：是基于入口的静态模块打包工具，会自动递归解析入口所需要加载的所有资源，然后用不同的 loader 来处理不同的资源，用 plugin 来扩展功能</li></ul></li><li><h2 id="构建流程" tabindex="-1">构建流程 <a class="header-anchor" href="#构建流程" aria-label="Permalink to &quot;构建流程&quot;">​</a></h2><ul><li>初始化参数，从配置文件和 shell 语句中读取与合并参数，得出最终的参数；</li><li>开始编译，用上一步得到的参数初始化 compiler 对象，加载所有配置的插件，执行对象的 run方法开始编译</li><li>确定入口，根据配置中的 entry 找到所有的入口文件</li><li>编译模块，从入口文件出发，调用所有配置的 loader 对模块进行翻译，再找出该模块依赖的模块</li><li>完成编译模块，所有的 loader 翻译完所有模块后，得到每个模块被翻译后的最终内容和他们之间的依赖关系</li><li>输出资源，根据入口和模块之间的依赖，组成一个个包含多个模块的 chunk，再把每个 chunk 转换成一个单独的文件加入到输出列表</li><li>输出完成，在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入文件系统</li></ul></li><li><h2 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">​</a></h2><ul><li>压缩代码，删除多余的代码，可以利用 webpack 的 uglifysPlugin 和 parallelUglifyPlugin 来压缩 js文件</li><li>利用 cdn 加速，在构建过程中将引用的静态资源路径修改为 cdn 上对应的路径，可利用 webpack 对应的 output 参数和各个 loader 的 publicPath 参数来修改资源路径</li><li>删除死代码（tree shaking），将代码中永远不会走到的片段删除掉，可以在通过启动 webpack 时追加参数—optimize—minimize—来实现</li><li>提取公共代码，CommonChunkPlugin</li></ul></li><li><h2 id="提高构建速度" tabindex="-1">提高构建速度 <a class="header-anchor" href="#提高构建速度" aria-label="Permalink to &quot;提高构建速度&quot;">​</a></h2><ul><li>在多入口情况下使用 commonChunkPlugin 来提取公共代码</li><li>使用 Tree Shaking 来删除多余代码</li><li>利用 webpack-paralell-plugin 来提升 uglifyPlugin 的压缩速度</li></ul></li><li><h2 id="常见loader、plugin和compiler" tabindex="-1">常见loader、plugin和compiler <a class="header-anchor" href="#常见loader、plugin和compiler" aria-label="Permalink to &quot;常见loader、plugin和compiler&quot;">​</a></h2><ul><li>style-loader：将css添加到DOM的内联样式标签style里</li><li>css-loader：允许将css文件通过require的方式引入，并返回css代码</li><li>less-loader：加载和转义less文件</li><li>sass-loader：加载和转义sass/scss文件</li><li>script-loader：在全局上下文中执行一次javascript文件，不需要解析</li><li>postcss-loader：用postcss来处理CSS，处理CSS3属性前缀</li><li>babel-loader： 加载ES6 代码后使用Babel转义为ES5后浏览器才能解析</li><li>html-minify-loader：压缩HTML</li><li>raw-loader：加载文件原始内容(utf-8格式)</li><li>file-loader：分发文件到output目录并返回相对路径</li><li>url-loader：多数用于加载图片资源,超过文件大小显示则返回data URL</li><li>vue-loader：加载和转义vue组件</li><li>vue-template-compiler：将 Vue 2.0 模板预编译为渲染函数（template =&gt; ast =&gt; render），以避免运行时编译开销和 CSP 限制，与 vue-loader 一起使用</li><li>html-webpack-plugin：生成一个HTML文件，并自动将Webpack打包生成的JS、CSS等文件注入到这个HTML文件中</li><li>script-ext-html-webpack-plugin：增强html-webpack-plugin插件的功能，在生成的HTML中，可以处理和优化Script标签的属性</li><li>eslint-plugin-vue：提供ESLint的规则集，用于检测和修复Vue.js组件中的代码问题</li><li>uglifyjs-webpack-plugin：使用UglifyJS对Webpack打包后的JavaScript文件进行压缩和优化</li><li>compression-webpack-plugin：为Webpack生成的资源文件提供Gzip压缩</li></ul></li><li><h2 id="其他打包构建工具" tabindex="-1">其他打包构建工具 <a class="header-anchor" href="#其他打包构建工具" aria-label="Permalink to &quot;其他打包构建工具&quot;">​</a></h2><ul><li>Rollup：是一个JavaScript模块打包器，专注于JavaScript库和工具的打包</li><li>Vite：是一个基于ES模块的快速开发服务器，同时也是一个静态网页服务器，他使用Rollup打包代码 <ul><li>快速的冷启动</li><li>即时的模块热更新</li><li>真正的按需编译</li></ul></li></ul></li></ol>',2),o=[t];function c(s,n,u,p,d,h){return e(),i("div",null,o)}const k=l(r,[["render",c]]);export{m as __pageData,k as default};
